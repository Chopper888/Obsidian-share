{"command_timeout":5,"template_folder":"Template","templates_pairs":[["capture","<%*\n//'first' will add to top of file. 'last' will add to bottom of file\nlet firstOrLastLine = 'first';\nlet curDateFormat = '[' + '[' + tp.date.now(\"YYYY-MM-DD\") + ']]';\nlet finalTimestamp = curDateFormat;\nlet curTimeFormat = tp.date.now(\"hh:mm A\");\nif(curTimeFormat != ''){finalTimestamp = finalTimestamp + ' ' + curTimeFormat}\n\nlet qcFolderLocation = this.app.fileManager.getNewFileParent().path;\nif(qcFolderLocation != '' && qcFolderLocation != '/'){qcFolderLocation = qcFolderLocation + '/'}\nif(qcFolderLocation == '/'){qcFolderLocation = ''}\nlet qcFilePath = qcFolderLocation + 'Quick Capture' + '.md';\nlet qcFile = this.app.vault.getAbstractFileByPath(qcFilePath);\nif(!qcFile) {\n    await this.app.fileManager.createNewMarkdownFile(this.app.fileManager.getNewFileParent(), 'Quick Capture')\n    qcFile = this.app.vault.getAbstractFileByPath(qcFilePath);\n}\n\nif(qcFile) {\n    let qcNote = await tp.system.prompt(\"Enter a Quick Capture note\");\n    let isTodo = qcNote.startsWith(';');\n    let finalNote = (isTodo ? '\\n- [x] ' : '') + finalTimestamp + ' - ' + (isTodo ? qcNote.substring(1) + '\\n' : qcNote);\n    let curContent = await this.app.vault.read(qcFile);\n    let newContents;\n    if(firstOrLastLine == 'last'){newContents = curContent + '\\n' + finalNote}else{newContents = finalNote + '\\n' + curContent}\n    this.app.vault.modify(qcFile, newContents);\n}\n%>"],["replacer","<%*\nlet thisFile = this.app.workspace.getActiveFile();\nlet thisFileCache = this.app.metadataCache.getFileCache(thisFile);\nlet embedsOnPage = thisFileCache.embeds;\n\nif(embedsOnPage) {\n    let cmEditorAct = this.app.workspace.activeLeaf.view.sourceMode.cmEditor;\n    let curLine = cmEditorAct.getCursor().line;\n    foundEmbed = embedsOnPage.find(eachItem => {\n        let embedLine = eachItem.position.start.line;\n        if(embedLine == curLine){\n            return true;\n        } else { return false; }\n    });\n    if(foundEmbed) {\n        let thisName = foundEmbed.link;\n        let fileName = thisName.split('#^')[0];\n        if(!fileName){fileName = thisFile.basename}\n        let blockId = thisName.split('#^')[1];\n        let myNewFile = this.app.metadataCache.getFirstLinkpathDest(fileName, '');\n        if(myNewFile) {\n            let newFileCache = this.app.metadataCache.getFileCache(myNewFile);\n            let foundBlock = newFileCache.blocks[blockId];\n            let newFileContents = await this.app.vault.cachedRead(myNewFile);\n            let foundBlockValue = newFileContents.substring(foundBlock.position.start.offset, foundBlock.position.end.offset).replace('^' + blockId,'').trim();\n            if(foundBlockValue) {\n                cmEditorAct.setSelection({ line: curLine, ch: 0 }, { line: curLine, ch: 9999 });\n                tR = tp.file.selection().replace(foundEmbed.original, foundBlockValue).split(\"\\n\").join(\"\");\n            }\n        }\n    }\n}\n%>"]],"trigger_on_file_creation":true,"enable_system_commands":true,"shell_path":""}